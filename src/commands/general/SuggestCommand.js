const { MessageEmbed } = require('discord.js');
const ActionConfirmationUtil = require('../../utils/misc/ActionConfirmationUtil');
const InteractionResponse = require('../../utils/interactions/InteractionResponse');
const FlameCommand = require('../../structures/FlameCommand');
const { getHelp } = require('../../utils/Functions');

class SuggestCommand extends FlameCommand {
  constructor() {
    super('suggest', {
      description: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞.',
      category: 'general',
      usage: 'suggest <–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ>',
      aliases: [],
      examples: [
        'f.suggest –î–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.',
      ],
      cooldown: 3,
    });
  }

  async run(message, args) {
    const data = await message.client.database.collection('guilds').findOne({ guildID: message.guild.id });
    if (!data.ideaChannel) return message.fail('–ù–∞ –¥–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã.');
    if (data.ideaBlacklist?.includes(message.author.id)) return message.fail('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.');

    const suggestion = args.join(' ');

    if (!suggestion) return getHelp(message, this.name);
    if (suggestion.length > 1850) return message.fail('–î–ª–∏–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç –≤ **1850** —Å–∏–º–≤–æ–ª–æ–≤.');
    if (!message.guild.me.permissionsIn(data.ideaChannel).has('SEND_MESSAGES')) return message.fail('–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.');

    await new ActionConfirmationUtil(message.client, message.author).init('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ? –£ –≤–∞—Å –µ—Å—Ç—å **30** —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ.', message.channel).then(async (response) => {
      if (response) {
        const id = (data.ideas?.length ?? 0) + 1;
        const m = await message.client.api.channels(data.ideaChannel).messages.post({
          data: {
            content: null,
            embed: new MessageEmbed()
              .setTitle(`–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚Ññ${id}`)
              .setDescription(suggestion)
              .setImage(message.attachments.first()?.proxyURL ?? null)
              .addField('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è:', `–ê–≤—Ç–æ—Ä: **${message.author.tag}** (${message.author.id})\n–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: <t:${(Date.now() / 1000).toFixed()}>`)
              .setColor('ffa500')
              .setFooter(message.guild.name, message.guild.iconURL())
              .setTimestamp()
              .toJSON(),
            components: [
              {
                type: 1,
                components: [
                  {
                    type: 2,
                    style: 4,
                    custom_id: 'delete',
                    label: '–£–¥–∞–ª–∏—Ç—å',
                    emoji: {
                      id: '862715940810653737',
                    },
                  },
                ],
              },
            ],
          },
        });
        message.client.database.collection('guilds').updateOne({ guildID: message.guild.id }, {
          $push: {
            ideas: {
              id,
              message: m.id,
            },
          },
        });
        message.client.cache.buttons.set(m.id, async (res) => {
          switch (res.data.custom_id) {
            case 'delete':
              if (res.member.permissions.has('MANAGE_GUILD') || res.member.id === message.author.id) {
                message.client.database.collection('guilds').updateOne({ guildID: message.guild.id }, {
                  $pull: {
                    ideas: { id },
                  },
                });
                await message.client.api.channels(data.ideaChannel).messages(m.id).patch({
                  data: {
                    content: '[–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ]',
                    embed: null,
                    components: [],
                  },
                });
              } else return new InteractionResponse(message.client)
                .send(res, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ—Å–∫–æ–ª—å–∫—É –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.', { flags: 64 });
              break;
            default:
          }
        });
        ['üëç', 'üëé'].forEach((r) => message.guild.channels.cache.get(data.ideaChannel).messages?.cache?.get(m.id)?.react(r));
        return message.channel.send(`${message.client.constants.emojis.DONE} –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª <#${data.ideaChannel}> (ID: **${id}**)`);
      } else message.fail('–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.');
    });
  }
}

module.exports = SuggestCommand;
