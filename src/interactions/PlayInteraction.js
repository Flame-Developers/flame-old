const FlameInteraction = require('../structures/FlameInteraction');
const FlamePlayer = require('../structures/music/player/FlamePlayer');
const InteractionResponse = require('../utils/interactions/InteractionResponse');

class PlayInteraction extends FlameInteraction {
  constructor() {
    super('play');
  }

  async run(client, interaction) {
    const callback = new InteractionResponse(client, interaction);
    const node = client.shoukaku?.getNode();

    const { query, search } = interaction.options;

    if (!interaction.member.voice.channelID) return callback.send('–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É.', { flags: 64 });
    if (!node) return callback.send('–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∏–∫–∞–∫–æ–π –∏–∑ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–∞ —Ä–µ—à–µ–Ω–∏–µ–º –¥–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã.', { flags: 64 });

    const allowedLinks = [
      /* Whitelisted and safe radios */
      'radiorecord.hostingradio.ru',
      'online.hitfm.ua',
      'cast.nrj.in.ua',
      'cast2.nrj.in.ua',
      'online.kissfm.ua',
      'online.radioroks.ua',
      'hermitage.hostingradio.ru',
      /* Safe audio/video hosts */
      'www.youtube.com',
      'youtube.com',
      'youtu.be',
      'twitch.tv',
      'plays.tv',
      'streamable.com',
      'bandcamp.com',
      'soundcloud.com',
      'open.spotify.com',
      'spotify.com',
      'yandex.ru',
      'music.yandex.ru',
      'discordapp.com',
      'cdn.discordapp.com',
    ];
    // eslint-disable-next-line no-use-before-define
    if (isUrl(query)) {
      const url = new URL(query);
      if (!allowedLinks.includes(url.host)) return callback.send('–£–∫–∞–∑–∞–Ω–Ω–∞—è –≤–∞–º–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö. –ü–æ—Å–µ—Ç–∏—Ç–µ FAQ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–Ω–µ—Å—Ç–∏ –µ–µ –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.', { flags: 64 });
    }

    const result = await node.rest.resolve(query, search);
    if (!result) return callback.send('–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–∏–∫–∞–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –í—ã —Ç–æ—á–Ω–æ —É–∫–∞–∑–∞–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞?', { flags: 64 });

    const { type, tracks, playlistName } = result;
    const track = tracks.shift();

    if (!track) return callback.send('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ç—Ä–µ–∫.', { flags: 64 });
    let player = client.players.get(interaction.guild.id);

    if (!player) {
      const connection = await node.joinVoiceChannel({
        guildID: interaction.guild.id,
        voiceChannelID: interaction.member.voice.channelID,
      });
      player = new FlamePlayer(client, interaction, connection);
      client.players.set(interaction.guild.id, player);
    }

    if (type === 'PLAYLIST') {
      for (const singleTrack of tracks) {
        player.queue.push(singleTrack);
      }
    } else player.queue.push(track);

    callback.send(
      `üéµ ${type === 'PLAYLIST' 
        ? `–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª **${tracks.length}** —Ç—Ä–µ–∫–æ–≤ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ **${playlistName}**.` 
        : `–¢—Ä–µ–∫ **${track?.info?.title ?? 'Unknown'}** –ø–æ –∑–∞–ø—Ä–æ—Å—É **${interaction.member.user.tag}** –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.
        `}`,
    );

    await player.play();

    function isUrl(url) {
      try {
        new URL(url);
        return true;
      } catch (_) {
        return false;
      }
    }
  }
}

module.exports = PlayInteraction;
